#!/usr/local/bin/python3
# Written by William Thomas

import os
import re
import subprocess
import sys

def run(cmd, cwd=None):
	if not cwd:
		cwd = os.getcwd()

	proc = subprocess.Popen(cmd,
		stdout = subprocess.PIPE,
		stderr = subprocess.PIPE,
		shell = True,
		cwd = cwd
	)
	stdout, stderr = proc.communicate()
	return proc.returncode, str(stdout.decode('utf-8')).strip(), str(stderr.decode('utf-8')).strip()

def runComparison(base, feature, cwd=None):
	return run("git --no-pager diff --stat origin/%s..origin/%s | tail -n 1" % (base, feature), cwd)

def parseDiff(diff):
	regex = r"(\d+).*file[^\d]+(\d+).*insertion[^\d]+(\d+).*deletion"
	matches = re.finditer(regex, diff, re.MULTILINE)
	for matchNum, match in enumerate(matches, start=1):
		if len(match.groups()) == 3:
			return {
				"files": int(match.group(1)),
				"insertions": int(match.group(2)),
				"deletions": int(match.group(3)),
			}
	return False

def compare (base, feature, cwd=None):
	code, out, err = runComparison(base, feature, cwd)
	if err:
		print(err)
		return False
	return parseDiff(out)

def getRepoName(cwd=None):
	code, out, err = run("basename `git rev-parse --show-toplevel`", cwd)
	if err:
		return False
	return out

def printComparisonReport (base, feature, repoName, files, insertions, deletions):
	print ("Comparing %s ‚Üê %s (%s):" % (base, feature, repoName))
	print ("Files changed: %d" % (files))
	print ("Additions: %d" % (insertions))
	print ("Deletions: %d" % (deletions))
	print ("Total changes: %d" % (insertions + deletions))

def runComparisonForRepo (cwd):
	repoName = getRepoName(cwd)
	if not repoName:
		print ("Not a git repository.")
		return False

	result = compare(base, feature, cwd)
	if not result:
		return False

	result["repo"] = repoName
	printComparisonReport (base, feature, repoName, result['files'], result['insertions'], result['deletions'])
	return result

if __name__ == "__main__":
	if len(sys.argv) < 3:
		print("Usage: gitcompare BASE_BRANCH FEATURE_BRANCH")
		sys.exit(1)

	base = sys.argv[1]
	feature = sys.argv[2]

	wolfResult = runComparisonForRepo (os.getcwd ())
	if not wolfResult:
		sys.exit(1)

	# Special case for wolf repo
	if wolfResult["repo"] == "wolf":
		shireDir = os.path.join (os.getcwd(), 'shire')
		print ()
		shireResult = runComparisonForRepo (shireDir)

		print ()
		printComparisonReport (base, feature, "Total",
			wolfResult["files"] + shireResult["files"],
			wolfResult["insertions"] + shireResult["insertions"],
			wolfResult["deletions"] + shireResult["deletions"]
		)
